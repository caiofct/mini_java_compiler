//
// Generated by JTB 1.3.2
//

options {
   LOOKAHEAD = 2;
   STATIC = false;
}

PARSER_BEGIN(Parlex)
package parlex;

import ansem.visitor.*;
import ansem.syntaxtree.*;
import java.util.Vector;


public class Parlex 
{
   public static void main(String args[]) throws ParseException
   {
      Parlex parser = null;
      if ( args.length == 0 )
      {
         parser = new Parlex(System.in);
      }
      else
      {
         try
         {
            parser = new Parlex(new java.io.FileInputStream(args[0]));
         }
         catch (java.io.FileNotFoundException e)
         {
            System.out.println(e.getMessage());
            System.out.println("Parlex: erro ao ler arquivo!");
            e.printStackTrace();
         }
      }
      try
      {
         Node root = parser.Start();
         System.out.println("Parlex: parser executado com sucesso!");
         System.out.println();
         System.out.println("++Imprimindo somente as variaveis declaradas++");
         System.out.println();
         final TreeDumper dumper = new TreeDumper();
         dumper.printSpecials(false);
         root.accept(new DepthFirstVisitor(){
            public void visit(VarDecl n)
            {
               dumper.startAtNextToken();
               n.f0.accept(dumper);
               n.f1.accept(dumper);
               n.f2.accept(dumper);
               System.out.println();
            }
         });
         System.out.println();
         System.out.println("++Fim de Imprimindo somente as variaveis declaradas++");
      }
      catch (ParseException e)
      {
         System.out.println("Parlex: erro de sintaxe!");
         System.out.println(e.getMessage());
         e.printStackTrace();
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(Parlex)

SKIP :
{
   <"//" (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | " ")*>
   | <"/*" (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "\n" | "\r" | "\r\n" | " ")* "*/">
   | " "
   | "\t"
   | "\n"
   | "\r\n"
   | "\r"
}

TOKEN :
{
   <BINOP: ("&&" | "<" | "+" | "-" | "*")>
   | <UNOP: "!">
   | <INT: "int">
   | <STRING: "String">
   | <BOOLEAN: "boolean">
   | <IF: "if">
   | <ELSE: "else">
   | <WHILE: "while">
   | <THIS: "this">
   | <NEW: "new">
   | <PUBLIC: "public">
   | <STATIC: "static">
   | <VOID: "void">
   | <CLASS: "class">
   | <EXTENDS: "extends">
   | <RETURN: "return">
   | <MAIN: "main">
   | <LENGTH: "length">
   | <SYSTEM: "System">
   | <OUT: "out">
   | <PRINTLN: "println">
   | <LPAR: "(">
   | <RPAR: ")">
   | <LCOL: "[">
   | <RCOL: "]">
   | <LCHAVE: "{">
   | <RCHAVE: "}">
   | <PVIRGULA: ";">
   | <VIRGULA: ",">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <#DIGIT: ["0"-"9"]>
   | <TRUE: "true">
   | <FALSE: "false">
   | <ID: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | <DIGIT> | "_")*>
   | <INTEGER_LITERAL: ("-")? (<DIGIT>)+>
}

FormalRest FormalRest() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<VIRGULA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new FormalRest(n0,n2,n3); }
}

FormalList FormalList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Type n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5;
   FormalRest n6;

   
}
{
   (
      { n5 = new NodeListOptional(); }
      { n1 = new NodeSequence(3); }
      n2=Type()
      { n1.addNode(n2); }
      n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      (
         n6=FormalRest()
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )?
   
   { return new FormalList(n0); }
}

MethodDecl MethodDecl() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDecl n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1=<PUBLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<LPAR> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=FormalList()
   n9=<RPAR> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<LCHAVE> { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      n13=VarDecl()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   (
      n15=Statement()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17=<RETURN> { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=Exp()
   n20=<PVIRGULA> { n19 = JTBToolkit.makeNodeToken(n20); }
   n22=<RCHAVE> { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new MethodDecl(n0,n2,n3,n5,n7,n8,n10,n12,n14,n16,n18,n19,n21); }
}

Type Type() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      n3=<INT> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<LCOL> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7=<RCOL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n9=<INT> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0 = new NodeChoice(n8, 1); }
   |
      LOOKAHEAD(1)
      n11=<BOOLEAN> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 2); }
   |
      n13=<ID> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 3); }
   )
   
   { return new Type(n0); }
}

VarDecl VarDecl() :
{
   Type n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=Type()
   n2=<ID> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PVIRGULA> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new VarDecl(n0,n1,n3); }
}

ClassDecl ClassDecl() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDecl n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDecl n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeListOptional n25 = new NodeListOptional();
   VarDecl n26;
   NodeListOptional n27 = new NodeListOptional();
   MethodDecl n28;
   NodeToken n29;
   Token n30;

   
}
{
   (
      LOOKAHEAD(3)
      { n1 = new NodeSequence(7); }
      n3=<CLASS> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<ID> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7=<LCHAVE> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      (
         n9=VarDecl()
         { n8.addNode(n9); }
      )*
      { n8.nodes.trimToSize(); }
      { n1.addNode(n8); }
      (
         n11=MethodDecl()
         { n10.addNode(n11); }
      )*
      { n10.nodes.trimToSize(); }
      { n1.addNode(n10); }
      n13=<RCHAVE> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n1.addNode(n12); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n14 = new NodeSequence(8); }
      n16=<CLASS> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n18=<ID> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n14.addNode(n17); }
      n20=<EXTENDS> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n14.addNode(n19); }
      n22=<ID> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n14.addNode(n21); }
      n24=<LCHAVE> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n14.addNode(n23); }
      (
         n26=VarDecl()
         { n25.addNode(n26); }
      )*
      { n25.nodes.trimToSize(); }
      { n14.addNode(n25); }
      (
         n28=MethodDecl()
         { n27.addNode(n28); }
      )*
      { n27.nodes.trimToSize(); }
      { n14.addNode(n27); }
      n30=<RCHAVE> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n14.addNode(n29); }
      { n0 = new NodeChoice(n14, 1); }
   )
   
   { return new ClassDecl(n0); }
}

ExpRest ExpRest() :
{
   NodeToken n0;
   Token n1;
   Exp n2;

   
}
{
   n1=<VIRGULA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Exp()
   
   { return new ExpRest(n0,n2); }
}

ExpList ExpList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Exp n2;
   NodeListOptional n3;
   ExpRest n4;

   
}
{
   (
      { n3 = new NodeListOptional(); }
      { n1 = new NodeSequence(2); }
      n2=Exp()
      { n1.addNode(n2); }
      (
         n4=ExpRest()
         { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new ExpList(n0); }
}

Exp Exp() :
{
   ExpSemLR n0;
   ExpComRR n1;

   
}
{
   n0=ExpSemLR()
   n1=ExpComRR()
   
   { return new Exp(n0,n1); }
}

ExpComRR ExpComRR() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Exp n5;
   ExpComRR n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   ExpComRR n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   ExpComRR n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   ExpList n27;
   NodeToken n28;
   Token n29;
   ExpComRR n30;

   
}
{
   (
      (
         { n2 = new NodeSequence(3); }
         n4=<BINOP> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=Exp()
         { n2.addNode(n5); }
         n6=ExpComRR()
         { n2.addNode(n6); }
         { n1 = new NodeChoice(n2, 0); }
      |
         { n7 = new NodeSequence(4); }
         n9=<LCOL> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=Exp()
         { n7.addNode(n10); }
         n12=<RCOL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n7.addNode(n11); }
         n13=ExpComRR()
         { n7.addNode(n13); }
         { n1 = new NodeChoice(n7, 1); }
      |
         LOOKAHEAD(2)
         { n14 = new NodeSequence(4); }
         n16=<DOT> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n18=<LENGTH> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n14.addNode(n17); }
         n19=ExpComRR()
         { n14.addNode(n19); }
         { n1 = new NodeChoice(n14, 2); }
      |
         { n20 = new NodeSequence(6); }
         n22=<DOT> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         n24=<ID> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n20.addNode(n23); }
         n26=<LPAR> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n20.addNode(n25); }
         n27=ExpList()
         { n20.addNode(n27); }
         n29=<RPAR> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n20.addNode(n28); }
         n30=ExpComRR()
         { n20.addNode(n30); }
         { n1 = new NodeChoice(n20, 3); }
      )
      { n0.addNode(n1); }
   )?
   
   { return new ExpComRR(n0); }
}

ExpSemLR ExpSemLR() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   Exp n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   Exp n37;
   NodeToken n38;
   Token n39;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<TRUE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<FALSE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<ID> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<THIS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      LOOKAHEAD(2)
      { n11 = new NodeSequence(6); }
      n13=<NEW> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n15=<INT> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n11.addNode(n14); }
      n17=<LCOL> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n11.addNode(n16); }
      n18=Exp()
      { n11.addNode(n18); }
      n20=<RCOL> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n11.addNode(n19); }
      { n0 = new NodeChoice(n11, 5); }
   |
      { n21 = new NodeSequence(4); }
      n23=<NEW> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21.addNode(n22); }
      n25=<ID> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n21.addNode(n24); }
      n27=<LPAR> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n21.addNode(n26); }
      n29=<RPAR> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n21.addNode(n28); }
      { n0 = new NodeChoice(n21, 6); }
   |
      { n30 = new NodeSequence(2); }
      n32=<UNOP> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n30.addNode(n31); }
      n33=Exp()
      { n30.addNode(n33); }
      { n0 = new NodeChoice(n30, 7); }
   |
      { n34 = new NodeSequence(3); }
      n36=<LPAR> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n34.addNode(n35); }
      n37=Exp()
      { n34.addNode(n37); }
      n39=<RPAR> { n38 = JTBToolkit.makeNodeToken(n39); }
      { n34.addNode(n38); }
      { n0 = new NodeChoice(n34, 8); }
   )
   
   { return new ExpSemLR(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   Statement n16;
   NodeToken n17;
   Token n18;
   Statement n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Exp n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   Exp n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeSequence n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   Exp n52;
   NodeToken n53;
   Token n54;
   NodeSequence n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   Exp n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   Exp n65;
   NodeToken n66;
   Token n67;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<LCHAVE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n5=Statement()
         { n4.addNode(n5); }
      )*
      { n4.nodes.trimToSize(); }
      { n1.addNode(n4); }
      n7=<RCHAVE> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(7); }
      n10=<IF> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n12=<LPAR> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n8.addNode(n11); }
      n13=Exp()
      { n8.addNode(n13); }
      n15=<RPAR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n8.addNode(n14); }
      n16=Statement()
      { n8.addNode(n16); }
      n18=<ELSE> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n8.addNode(n17); }
      n19=Statement()
      { n8.addNode(n19); }
      { n0 = new NodeChoice(n8, 1); }
   |
      { n20 = new NodeSequence(5); }
      n22=<WHILE> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n24=<LPAR> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n20.addNode(n23); }
      n25=Exp()
      { n20.addNode(n25); }
      n27=<RPAR> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n20.addNode(n26); }
      n28=Statement()
      { n20.addNode(n28); }
      { n0 = new NodeChoice(n20, 2); }
   |
      { n29 = new NodeSequence(9); }
      n31=<SYSTEM> { n30 = JTBToolkit.makeNodeToken(n31); }
      { n29.addNode(n30); }
      n33=<DOT> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n29.addNode(n32); }
      n35=<OUT> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n29.addNode(n34); }
      n37=<DOT> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n29.addNode(n36); }
      n39=<PRINTLN> { n38 = JTBToolkit.makeNodeToken(n39); }
      { n29.addNode(n38); }
      n41=<LPAR> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n29.addNode(n40); }
      n42=Exp()
      { n29.addNode(n42); }
      n44=<RPAR> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n29.addNode(n43); }
      n46=<PVIRGULA> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n29.addNode(n45); }
      { n0 = new NodeChoice(n29, 3); }
   |
      LOOKAHEAD(2)
      { n47 = new NodeSequence(5); }
      n49=<ID> { n48 = JTBToolkit.makeNodeToken(n49); }
      { n47.addNode(n48); }
      n51=<ASSIGN> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n47.addNode(n50); }
      n52=Exp()
      { n47.addNode(n52); }
      n54=<PVIRGULA> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n47.addNode(n53); }
      { n0 = new NodeChoice(n47, 4); }
   |
      { n55 = new NodeSequence(7); }
      n57=<ID> { n56 = JTBToolkit.makeNodeToken(n57); }
      { n55.addNode(n56); }
      n59=<LCOL> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n55.addNode(n58); }
      n60=Exp()
      { n55.addNode(n60); }
      n62=<RCOL> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n55.addNode(n61); }
      n64=<ASSIGN> { n63 = JTBToolkit.makeNodeToken(n64); }
      { n55.addNode(n63); }
      n65=Exp()
      { n55.addNode(n65); }
      n67=<PVIRGULA> { n66 = JTBToolkit.makeNodeToken(n67); }
      { n55.addNode(n66); }
      { n0 = new NodeChoice(n55, 5); }
   )
   
   { return new Statement(n0); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ID> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<LCHAVE> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<PUBLIC> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<STATIC> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<VOID> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<MAIN> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<LPAR> { n14 = JTBToolkit.makeNodeToken(n15); }
   n17=<STRING> { n16 = JTBToolkit.makeNodeToken(n17); }
   n19=<LCOL> { n18 = JTBToolkit.makeNodeToken(n19); }
   n21=<RCOL> { n20 = JTBToolkit.makeNodeToken(n21); }
   n23=<ID> { n22 = JTBToolkit.makeNodeToken(n23); }
   n25=<RPAR> { n24 = JTBToolkit.makeNodeToken(n25); }
   n27=<LCHAVE> { n26 = JTBToolkit.makeNodeToken(n27); }
   n28=Statement()
   n30=<RCHAVE> { n29 = JTBToolkit.makeNodeToken(n30); }
   n32=<RCHAVE> { n31 = JTBToolkit.makeNodeToken(n32); }
   
   { return new MainClass(n0,n2,n4,n6,n8,n10,n12,n14,n16,n18,n20,n22,n24,n26,n28,n29,n31); }
}

Start Start() :
{
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDecl n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=MainClass()
   (
      n2=ClassDecl()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   n4=<EOF> { 
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
   }
   
   { return new Start(n0,n1,n3); }
}
