//
// Generated by JTB 1.3.2
//

package ansem.syntaxtree;

import gci.tree.Expression;
import gci.tree.IRType;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;INTEGER_LITERAL&gt;
 *       | &lt;TRUE&gt;
 *       | &lt;FALSE&gt;
 *       | &lt;ID&gt;
 *       | &lt;THIS&gt;
 *       | &lt;NEW&gt; &lt;INT&gt; &lt;LCOL&gt; Exp() &lt;RCOL&gt;
 *       | &lt;NEW&gt; &lt;ID&gt; &lt;LPAR&gt; &lt;RPAR&gt;
 *       | &lt;UNOP&gt; Exp()
 *       | &lt;LPAR&gt; Exp() &lt;RPAR&gt;
 * </PRE>
 */
public class ExpSemLR implements Node {
   public NodeChoice f0;

   public ExpSemLR(NodeChoice n0) {
      f0 = n0;
   }

   public IRType accept(ansem.visitor.IRVisitor v) throws SemanticException {
      return v.visit(this);
   }

   public void accept(ansem.visitor.Visitor v) throws SemanticException {
      v.visit(this);
   }
   public <R,A> R accept(ansem.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(ansem.visitor.GJNoArguVisitor<R> v) throws SemanticException {
      return v.visit(this);
   }
   public <A> void accept(ansem.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

