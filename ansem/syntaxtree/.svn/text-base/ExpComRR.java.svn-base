//
// Generated by JTB 1.3.2
//

package ansem.syntaxtree;

import gci.tree.Expression;
import gci.tree.IRType;

/**
 * Grammar production:
 * <PRE>
 * f0 -> ( &lt;BINOP&gt; Exp() ExpComRR() | &lt;LCOL&gt; Exp() &lt;RCOL&gt; ExpComRR() | &lt;DOT&gt; &lt;LENGTH&gt; ExpComRR() | &lt;DOT&gt; &lt;ID&gt; &lt;LPAR&gt; ExpList() &lt;RPAR&gt; ExpComRR() )?
 * </PRE>
 */
public class ExpComRR implements Node {
   public NodeOptional f0;
   public Expression expslr;
    public ExpSemLR expslr2;

   public ExpComRR(NodeOptional n0) {
      f0 = n0;
      expslr = null;
      expslr2 = null;
   }

   public IRType accept(ansem.visitor.IRVisitor v) throws SemanticException {
      return v.visit(this);
   }

   public void accept(ansem.visitor.Visitor v) throws SemanticException {
      v.visit(this);
   }
   public <R,A> R accept(ansem.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(ansem.visitor.GJNoArguVisitor<R> v) throws SemanticException {
      return v.visit(this);
   }
   public <A> void accept(ansem.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

