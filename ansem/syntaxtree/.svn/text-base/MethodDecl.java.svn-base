//
// Generated by JTB 1.3.2
//

package ansem.syntaxtree;

import gci.tree.IRType;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Hashtable;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;PUBLIC&gt;
 * f1 -> Type()
 * f2 -> &lt;ID&gt;
 * f3 -> &lt;LPAR&gt;
 * f4 -> FormalList()
 * f5 -> &lt;RPAR&gt;
 * f6 -> &lt;LCHAVE&gt;
 * f7 -> ( VarDecl() )*
 * f8 -> ( Statement() )*
 * f9 -> &lt;RETURN&gt;
 * f10 -> Exp()
 * f11 -> &lt;PVIRGULA&gt;
 * f12 -> &lt;RCHAVE&gt;
 * </PRE>
 */
public class MethodDecl implements Node {
   public NodeToken f0;
   public Type f1;
   public NodeToken f2;
   public NodeToken f3;
   public FormalList f4;
   public NodeToken f5;
   public NodeToken f6;
   public NodeListOptional f7;
   public NodeListOptional f8;
   public NodeToken f9;
   public Exp f10;
   public NodeToken f11;
   public NodeToken f12;
   public String name; // nome do metodo
   public String returnType; // tipo de retorno

   public Hashtable<String, String> hashVariables; // declaracoes de variaveis, mapeamento id -> type
   private Hashtable<String, String> hashParams; // declaracoes de parametros de entrada do metodo, mapeamento id -> type
   
   public MethodDecl(NodeToken n0, Type n1, NodeToken n2, NodeToken n3, FormalList n4, NodeToken n5, NodeToken n6, NodeListOptional n7, NodeListOptional n8, NodeToken n9, Exp n10, NodeToken n11, NodeToken n12) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
      f11 = n11;
      f12 = n12;
      hashVariables = new Hashtable<String, String>();
      hashParams = new Hashtable<String, String>();
   }

   public MethodDecl(Type n0, NodeToken n1, FormalList n2, NodeListOptional n3, NodeListOptional n4, Exp n5) {
      f0 = new NodeToken("public");
      f1 = n0;
      f2 = n1;
      f3 = new NodeToken("(");
      f4 = n2;
      f5 = new NodeToken(")");
      f6 = new NodeToken("{");
      f7 = n3;
      f8 = n4;
      f9 = new NodeToken("return");
      f10 = n5;
      f11 = new NodeToken(";");
      f12 = new NodeToken("}");
      hashVariables = new Hashtable<String, String>();
      hashParams = new Hashtable<String, String>();
   }

   public boolean addVar(String id, String type)
   {
      // WARNING: isso nao esta 100%, suponha que existe uma variavel com nome A declarada
      // como parametro de um método. Assim, é valido existir uma variavel A declarada localmente no metodo?
      // ou uma variavel A declarada na classe?
      if(hashVariables.containsKey(id)) return false;

      hashVariables.put(id, type);
      return true;
   }

   /**
    * Adiciona parametros de entrada do metodo na tabela de simbolos
    * @param id variavel, identificador,...
    * @param type tipo do identificador
    * @return true caso a identificador foi inserido na tabela de simbolos
    */
   public boolean addParam(String id, String type)
   {
       // WARNING: isso nao esta 100%, suponha que existe uma variavel com nome A declarada
       // como parametro de um método. Assim, é valido existir uma variavel A declarada localmente no metodo?
       // ou uma variavel A declarada na classe?
       if(hashParams.containsKey(id)) return false;

       hashParams.put(id, type);
       return true;
   }

   /**
    * Verifica se a lista de parametros é a mesma dos parametros do metodo
    *
    * @param m Método a ter sua lista de parâmetros comparada
    */
   public boolean checkParams(MethodDecl m)
   {
       if(hashParams.size() != m.hashParams.size())
        return false;

       Enumeration<String> enum1 = m.hashParams.elements();
       Enumeration<String> enum2 = hashParams.elements();
       while(enum1.hasMoreElements())
       {
           if(!enum1.nextElement().equals(enum2.nextElement()))
           {
               return false;
           }
       }

       return true;
   }

    @Override
   public String toString()
   {
        String signature = name + hashParams.values().toString();
        
        return signature;
   }

   //variableBelongsToLocalVariables
   //verifica se uma variavel pertence ao conjunto das variaveis locais do metodo
   public boolean variableBelongsToLocalVariables(String variavel) {
       if (this.hashVariables.containsKey(variavel)) return true;
       return false;
   }

   //variableBelongsToParamVariables
   //verifica se uma variavel pertence ao conjunto dos parametros do metodo
   public boolean variableBelongsToParamVariables(String variavel) {
       if (this.hashParams.containsKey(variavel)) return true;
       return false;
   }

   //getVariableType
   //retorna o tipo de dados da variavel
   //dos parametros ou das variaveis locais
   public String getVariableType(String variavel, String local) {
       if (local.equalsIgnoreCase("local")) { //quer das variaveis locais ?
           return this.hashVariables.get(variavel);
       }
       else { //quer dos parametros ?
           return this.hashParams.get(variavel); 
       }

   }

   /**
    * Retorna o tipo da variavel
    * @param variavel
    * @return
    */
   public String getVariableType(String variavel)
   {
       if(this.hashVariables.containsKey(variavel))
       {
           return this.hashVariables.get(variavel);
       }
       return this.hashParams.get(variavel);
   }

   public IRType accept(ansem.visitor.IRVisitor v) throws SemanticException {
      return v.visit(this);
   }

   public void accept(ansem.visitor.Visitor v) throws SemanticException {
      v.visit(this);
   }
   public <R,A> R accept(ansem.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(ansem.visitor.GJNoArguVisitor<R> v)  throws SemanticException {
      return v.visit(this);
   }
   public <A> void accept(ansem.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

