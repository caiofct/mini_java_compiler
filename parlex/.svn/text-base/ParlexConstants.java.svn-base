/* Generated By:JavaCC: Do not edit this line. ParlexConstants.java */
package parlex;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParlexConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BINOP = 8;
  /** RegularExpression Id. */
  int UNOP = 9;
  /** RegularExpression Id. */
  int INT = 10;
  /** RegularExpression Id. */
  int STRING = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int IF = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int WHILE = 15;
  /** RegularExpression Id. */
  int THIS = 16;
  /** RegularExpression Id. */
  int NEW = 17;
  /** RegularExpression Id. */
  int PUBLIC = 18;
  /** RegularExpression Id. */
  int STATIC = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int CLASS = 21;
  /** RegularExpression Id. */
  int EXTENDS = 22;
  /** RegularExpression Id. */
  int RETURN = 23;
  /** RegularExpression Id. */
  int MAIN = 24;
  /** RegularExpression Id. */
  int LENGTH = 25;
  /** RegularExpression Id. */
  int SYSTEM = 26;
  /** RegularExpression Id. */
  int OUT = 27;
  /** RegularExpression Id. */
  int PRINTLN = 28;
  /** RegularExpression Id. */
  int LPAR = 29;
  /** RegularExpression Id. */
  int RPAR = 30;
  /** RegularExpression Id. */
  int LCOL = 31;
  /** RegularExpression Id. */
  int RCOL = 32;
  /** RegularExpression Id. */
  int LCHAVE = 33;
  /** RegularExpression Id. */
  int RCHAVE = 34;
  /** RegularExpression Id. */
  int PVIRGULA = 35;
  /** RegularExpression Id. */
  int VIRGULA = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int ASSIGN = 38;
  /** RegularExpression Id. */
  int DIGIT = 39;
  /** RegularExpression Id. */
  int TRUE = 40;
  /** RegularExpression Id. */
  int FALSE = 41;
  /** RegularExpression Id. */
  int ID = 42;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\\n\"",
    "\"\\r\"",
    "<BINOP>",
    "\"!\"",
    "\"int\"",
    "\"String\"",
    "\"boolean\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"this\"",
    "\"new\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"class\"",
    "\"extends\"",
    "\"return\"",
    "\"main\"",
    "\"length\"",
    "\"System\"",
    "\"out\"",
    "\"println\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "<DIGIT>",
    "\"true\"",
    "\"false\"",
    "<ID>",
    "<INTEGER_LITERAL>",
  };

}
