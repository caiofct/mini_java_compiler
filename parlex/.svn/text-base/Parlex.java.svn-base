/* Generated By:JavaCC: Do not edit this line. Parlex.java */
package parlex;

import Canon.BasicBlocks;
import Canon.TraceSchedule;
import ansem.visitor.*;
import ansem.syntaxtree.*;
import gci.Fragmentos;
import gci.IRTreeVisitor;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Parlex implements ParlexConstants {

   public static void main(String args[]) throws ParseException
   {
      Parlex parser = null;
            
      if ( args.length == 0 )
      {
         parser = new Parlex(System.in);
      }
      else
      {
         try
         {
            parser = new Parlex(new java.io.FileInputStream(args[0]));
         }
         catch (java.io.FileNotFoundException e)
         {
            System.out.println(e.getMessage());
            System.out.println("Parlex: erro ao ler arquivo!");
            e.printStackTrace();
         }
      }
      try
      {
         Node root = parser.Start();
         
         //chamando visitors
         //criando a tabela de simbolos
         try{
             root.accept(new SymbolTableVisitor());
         }
         catch(SemanticException e){
             System.out.println(e.toString());
             System.exit(1);
         }

         //checando os tipos
         try {
            root.accept(new TypeCheckingVisitor());
         }
         catch(SemanticException e)
         {
             System.out.println(e.toString());
         }
        
        try {
           root.accept(new IRTreeVisitor());

        } catch (SemanticException ex) {
            Logger.getLogger(Parlex.class.getName()).log(Level.SEVERE, null, ex);
        }
        TraceSchedule ts = new TraceSchedule(new BasicBlocks(Fragmentos.stmList));

      }
      catch (ParseException e)
      {
         System.out.println("Parlex: erro de sintaxe!");
         System.out.println(e.getMessage());
         e.printStackTrace();
      }
   }

  final public FormalRest FormalRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(VIRGULA);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n4 = jj_consume_token(ID);
             n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new FormalRest(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public FormalList FormalList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Type n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5;
   FormalRest n6;
    if (jj_2_2(2)) {
        n5 = new NodeListOptional();
        n1 = new NodeSequence(3);
      n2 = Type();
        n1.addNode(n2);
      n4 = jj_consume_token(ID);
                n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        n6 = FormalRest();
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n1.addNode(n5);
        n0.addNode(n1);
    } else {
      ;
    }
     {if (true) return new FormalList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl MethodDecl() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDecl n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n4 = jj_consume_token(ID);
             n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAR);
               n5 = JTBToolkit.makeNodeToken(n6);
    n7 = FormalList();
    n9 = jj_consume_token(RPAR);
               n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LCHAVE);
                  n10 = JTBToolkit.makeNodeToken(n11);
    label_2:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_2;
      }
      n13 = VarDecl();
        n12.addNode(n13);
    }
     n12.nodes.trimToSize();
    label_3:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_3;
      }
      n15 = Statement();
        n14.addNode(n15);
    }
     n14.nodes.trimToSize();
    n17 = jj_consume_token(RETURN);
                  n16 = JTBToolkit.makeNodeToken(n17);
    n18 = Exp();
    n20 = jj_consume_token(PVIRGULA);
                    n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RCHAVE);
                  n21 = JTBToolkit.makeNodeToken(n22);
     {if (true) return new MethodDecl(n0,n2,n3,n5,n7,n8,n10,n12,n14,n16,n18,n19,n21);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    if (jj_2_5(2)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(INT);
                 n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LCOL);
                  n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(RCOL);
                  n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_6(2)) {
      n9 = jj_consume_token(INT);
                 n8 = JTBToolkit.makeNodeToken(n9);
        n0 = new NodeChoice(n8, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        n11 = jj_consume_token(BOOLEAN);
                      n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 2);
        break;
      default:
        jj_la1[0] = jj_gen;
        if (jj_2_7(2)) {
          n13 = jj_consume_token(ID);
                 n12 = JTBToolkit.makeNodeToken(n13);
        n0 = new NodeChoice(n12, 3);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl VarDecl() throws ParseException {
   Type n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = Type();
    n2 = jj_consume_token(ID);
             n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(PVIRGULA);
                   n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new VarDecl(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl ClassDecl() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDecl n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDecl n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeListOptional n25 = new NodeListOptional();
   VarDecl n26;
   NodeListOptional n27 = new NodeListOptional();
   MethodDecl n28;
   NodeToken n29;
   Token n30;
    if (jj_2_12(3)) {
        n1 = new NodeSequence(7);
      n3 = jj_consume_token(CLASS);
                   n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(ID);
                n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(LCHAVE);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
      label_4:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_4;
        }
        n9 = VarDecl();
           n8.addNode(n9);
      }
        n8.nodes.trimToSize();
        n1.addNode(n8);
      label_5:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_5;
        }
        n11 = MethodDecl();
           n10.addNode(n11);
      }
        n10.nodes.trimToSize();
        n1.addNode(n10);
      n13 = jj_consume_token(RCHAVE);
                     n12 = JTBToolkit.makeNodeToken(n13);
        n1.addNode(n12);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_13(2)) {
        n14 = new NodeSequence(8);
      n16 = jj_consume_token(CLASS);
                    n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n18 = jj_consume_token(ID);
                 n17 = JTBToolkit.makeNodeToken(n18);
        n14.addNode(n17);
      n20 = jj_consume_token(EXTENDS);
                      n19 = JTBToolkit.makeNodeToken(n20);
        n14.addNode(n19);
      n22 = jj_consume_token(ID);
                 n21 = JTBToolkit.makeNodeToken(n22);
        n14.addNode(n21);
      n24 = jj_consume_token(LCHAVE);
                     n23 = JTBToolkit.makeNodeToken(n24);
        n14.addNode(n23);
      label_6:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_6;
        }
        n26 = VarDecl();
           n25.addNode(n26);
      }
        n25.nodes.trimToSize();
        n14.addNode(n25);
      label_7:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_7;
        }
        n28 = MethodDecl();
           n27.addNode(n28);
      }
        n27.nodes.trimToSize();
        n14.addNode(n27);
      n30 = jj_consume_token(RCHAVE);
                     n29 = JTBToolkit.makeNodeToken(n30);
        n14.addNode(n29);
        n0 = new NodeChoice(n14, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ClassDecl(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpRest ExpRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;
    n1 = jj_consume_token(VIRGULA);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
     {if (true) return new ExpRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExpList ExpList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Exp n2;
   NodeListOptional n3;
   ExpRest n4;
    if (jj_2_15(2)) {
        n3 = new NodeListOptional();
        n1 = new NodeSequence(2);
      n2 = Exp();
        n1.addNode(n2);
      label_8:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_8;
        }
        n4 = ExpRest();
           n3.addNode(n4);
      }
        n3.nodes.trimToSize();
        n1.addNode(n3);
        n0.addNode(n1);
    } else {
      ;
    }
     {if (true) return new ExpList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
   ExpSemLR n0;
   ExpComRR n1;
    n0 = ExpSemLR();
    n1 = ExpComRR();
     {if (true) return new Exp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExpComRR ExpComRR() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Exp n5;
   ExpComRR n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   ExpComRR n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   ExpComRR n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   ExpList n27;
   NodeToken n28;
   Token n29;
   ExpComRR n30;
    if (jj_2_20(2)) {
      if (jj_2_16(2)) {
           n2 = new NodeSequence(3);
        n4 = jj_consume_token(BINOP);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n2.addNode(n3);
        n5 = Exp();
           n2.addNode(n5);
        n6 = ExpComRR();
           n2.addNode(n6);
           n1 = new NodeChoice(n2, 0);
      } else if (jj_2_17(2)) {
           n7 = new NodeSequence(4);
        n9 = jj_consume_token(LCOL);
                     n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        n10 = Exp();
           n7.addNode(n10);
        n12 = jj_consume_token(RCOL);
                      n11 = JTBToolkit.makeNodeToken(n12);
           n7.addNode(n11);
        n13 = ExpComRR();
           n7.addNode(n13);
           n1 = new NodeChoice(n7, 1);
      } else if (jj_2_18(2)) {
           n14 = new NodeSequence(4);
        n16 = jj_consume_token(DOT);
                     n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        n18 = jj_consume_token(LENGTH);
                        n17 = JTBToolkit.makeNodeToken(n18);
           n14.addNode(n17);
        n19 = ExpComRR();
           n14.addNode(n19);
           n1 = new NodeChoice(n14, 2);
      } else if (jj_2_19(2)) {
           n20 = new NodeSequence(6);
        n22 = jj_consume_token(DOT);
                     n21 = JTBToolkit.makeNodeToken(n22);
           n20.addNode(n21);
        n24 = jj_consume_token(ID);
                    n23 = JTBToolkit.makeNodeToken(n24);
           n20.addNode(n23);
        n26 = jj_consume_token(LPAR);
                      n25 = JTBToolkit.makeNodeToken(n26);
           n20.addNode(n25);
        n27 = ExpList();
           n20.addNode(n27);
        n29 = jj_consume_token(RPAR);
                      n28 = JTBToolkit.makeNodeToken(n29);
           n20.addNode(n28);
        n30 = ExpComRR();
           n20.addNode(n30);
           n1 = new NodeChoice(n20, 3);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
    } else {
      ;
    }
     {if (true) return new ExpComRR(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpSemLR ExpSemLR() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   Exp n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   Exp n37;
   NodeToken n38;
   Token n39;
    if (jj_2_21(2)) {
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_22(2)) {
      n4 = jj_consume_token(TRUE);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_23(2)) {
      n6 = jj_consume_token(FALSE);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
    } else if (jj_2_24(2)) {
      n8 = jj_consume_token(ID);
                n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
    } else if (jj_2_25(2)) {
      n10 = jj_consume_token(THIS);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
    } else if (jj_2_26(2)) {
        n11 = new NodeSequence(6);
      n13 = jj_consume_token(NEW);
                  n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n15 = jj_consume_token(INT);
                  n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
      n17 = jj_consume_token(LCOL);
                   n16 = JTBToolkit.makeNodeToken(n17);
        n11.addNode(n16);
      n18 = Exp();
        n11.addNode(n18);
      n20 = jj_consume_token(RCOL);
                   n19 = JTBToolkit.makeNodeToken(n20);
        n11.addNode(n19);
        n0 = new NodeChoice(n11, 5);
    } else if (jj_2_27(2)) {
        n21 = new NodeSequence(4);
      n23 = jj_consume_token(NEW);
                  n22 = JTBToolkit.makeNodeToken(n23);
        n21.addNode(n22);
      n25 = jj_consume_token(ID);
                 n24 = JTBToolkit.makeNodeToken(n25);
        n21.addNode(n24);
      n27 = jj_consume_token(LPAR);
                   n26 = JTBToolkit.makeNodeToken(n27);
        n21.addNode(n26);
      n29 = jj_consume_token(RPAR);
                   n28 = JTBToolkit.makeNodeToken(n29);
        n21.addNode(n28);
        n0 = new NodeChoice(n21, 6);
    } else if (jj_2_28(2)) {
        n30 = new NodeSequence(2);
      n32 = jj_consume_token(UNOP);
                   n31 = JTBToolkit.makeNodeToken(n32);
        n30.addNode(n31);
      n33 = Exp();
        n30.addNode(n33);
        n0 = new NodeChoice(n30, 7);
    } else if (jj_2_29(2)) {
        n34 = new NodeSequence(3);
      n36 = jj_consume_token(LPAR);
                   n35 = JTBToolkit.makeNodeToken(n36);
        n34.addNode(n35);
      n37 = Exp();
        n34.addNode(n37);
      n39 = jj_consume_token(RPAR);
                   n38 = JTBToolkit.makeNodeToken(n39);
        n34.addNode(n38);
        n0 = new NodeChoice(n34, 8);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ExpSemLR(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   Statement n16;
   NodeToken n17;
   Token n18;
   Statement n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Exp n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   Exp n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeSequence n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   Exp n52;
   NodeToken n53;
   Token n54;
   NodeSequence n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   Exp n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   Exp n65;
   NodeToken n66;
   Token n67;
    if (jj_2_31(2)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LCHAVE);
                    n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      label_9:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_9;
        }
        n5 = Statement();
           n4.addNode(n5);
      }
        n4.nodes.trimToSize();
        n1.addNode(n4);
      n7 = jj_consume_token(RCHAVE);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_32(2)) {
        n8 = new NodeSequence(7);
      n10 = jj_consume_token(IF);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n12 = jj_consume_token(LPAR);
                   n11 = JTBToolkit.makeNodeToken(n12);
        n8.addNode(n11);
      n13 = Exp();
        n8.addNode(n13);
      n15 = jj_consume_token(RPAR);
                   n14 = JTBToolkit.makeNodeToken(n15);
        n8.addNode(n14);
      n16 = Statement();
        n8.addNode(n16);
      n18 = jj_consume_token(ELSE);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n8.addNode(n17);
      n19 = Statement();
        n8.addNode(n19);
        n0 = new NodeChoice(n8, 1);
    } else if (jj_2_33(2)) {
        n20 = new NodeSequence(5);
      n22 = jj_consume_token(WHILE);
                    n21 = JTBToolkit.makeNodeToken(n22);
        n20.addNode(n21);
      n24 = jj_consume_token(LPAR);
                   n23 = JTBToolkit.makeNodeToken(n24);
        n20.addNode(n23);
      n25 = Exp();
        n20.addNode(n25);
      n27 = jj_consume_token(RPAR);
                   n26 = JTBToolkit.makeNodeToken(n27);
        n20.addNode(n26);
      n28 = Statement();
        n20.addNode(n28);
        n0 = new NodeChoice(n20, 2);
    } else if (jj_2_34(2)) {
        n29 = new NodeSequence(9);
      n31 = jj_consume_token(SYSTEM);
                     n30 = JTBToolkit.makeNodeToken(n31);
        n29.addNode(n30);
      n33 = jj_consume_token(DOT);
                  n32 = JTBToolkit.makeNodeToken(n33);
        n29.addNode(n32);
      n35 = jj_consume_token(OUT);
                  n34 = JTBToolkit.makeNodeToken(n35);
        n29.addNode(n34);
      n37 = jj_consume_token(DOT);
                  n36 = JTBToolkit.makeNodeToken(n37);
        n29.addNode(n36);
      n39 = jj_consume_token(PRINTLN);
                      n38 = JTBToolkit.makeNodeToken(n39);
        n29.addNode(n38);
      n41 = jj_consume_token(LPAR);
                   n40 = JTBToolkit.makeNodeToken(n41);
        n29.addNode(n40);
      n42 = Exp();
        n29.addNode(n42);
      n44 = jj_consume_token(RPAR);
                   n43 = JTBToolkit.makeNodeToken(n44);
        n29.addNode(n43);
      n46 = jj_consume_token(PVIRGULA);
                       n45 = JTBToolkit.makeNodeToken(n46);
        n29.addNode(n45);
        n0 = new NodeChoice(n29, 3);
    } else if (jj_2_35(2)) {
        n47 = new NodeSequence(5);
      n49 = jj_consume_token(ID);
                 n48 = JTBToolkit.makeNodeToken(n49);
        n47.addNode(n48);
      n51 = jj_consume_token(ASSIGN);
                     n50 = JTBToolkit.makeNodeToken(n51);
        n47.addNode(n50);
      n52 = Exp();
        n47.addNode(n52);
      n54 = jj_consume_token(PVIRGULA);
                       n53 = JTBToolkit.makeNodeToken(n54);
        n47.addNode(n53);
        n0 = new NodeChoice(n47, 4);
    } else if (jj_2_36(2)) {
        n55 = new NodeSequence(7);
      n57 = jj_consume_token(ID);
                 n56 = JTBToolkit.makeNodeToken(n57);
        n55.addNode(n56);
      n59 = jj_consume_token(LCOL);
                   n58 = JTBToolkit.makeNodeToken(n59);
        n55.addNode(n58);
      n60 = Exp();
        n55.addNode(n60);
      n62 = jj_consume_token(RCOL);
                   n61 = JTBToolkit.makeNodeToken(n62);
        n55.addNode(n61);
      n64 = jj_consume_token(ASSIGN);
                     n63 = JTBToolkit.makeNodeToken(n64);
        n55.addNode(n63);
      n65 = Exp();
        n55.addNode(n65);
      n67 = jj_consume_token(PVIRGULA);
                       n66 = JTBToolkit.makeNodeToken(n67);
        n55.addNode(n66);
        n0 = new NodeChoice(n55, 5);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ID);
             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LCHAVE);
                 n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(PUBLIC);
                 n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(STATIC);
                 n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(VOID);
                n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(MAIN);
                n12 = JTBToolkit.makeNodeToken(n13);
    n15 = jj_consume_token(LPAR);
                n14 = JTBToolkit.makeNodeToken(n15);
    n17 = jj_consume_token(STRING);
                  n16 = JTBToolkit.makeNodeToken(n17);
    n19 = jj_consume_token(LCOL);
                n18 = JTBToolkit.makeNodeToken(n19);
    n21 = jj_consume_token(RCOL);
                n20 = JTBToolkit.makeNodeToken(n21);
    n23 = jj_consume_token(ID);
              n22 = JTBToolkit.makeNodeToken(n23);
    n25 = jj_consume_token(RPAR);
                n24 = JTBToolkit.makeNodeToken(n25);
    n27 = jj_consume_token(LCHAVE);
                  n26 = JTBToolkit.makeNodeToken(n27);
    n28 = Statement();
    n30 = jj_consume_token(RCHAVE);
                  n29 = JTBToolkit.makeNodeToken(n30);
    n32 = jj_consume_token(RCHAVE);
                  n31 = JTBToolkit.makeNodeToken(n32);
     {if (true) return new MainClass(n0,n2,n4,n6,n8,n10,n12,n14,n16,n18,n20,n22,n24,n26,n28,n29,n31);}
    throw new Error("Missing return statement in function");
  }

  final public Start Start() throws ParseException {
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDecl n2;
   NodeToken n3;
   Token n4;
    n0 = MainClass();
    label_10:
    while (true) {
      if (jj_2_37(2)) {
        ;
      } else {
        break label_10;
      }
      n2 = ClassDecl();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    n4 = jj_consume_token(0);
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Start(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_3_33() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LCOL)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(UNOP)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(LCHAVE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCHAVE)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LCHAVE)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LCOL)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(LCOL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(BINOP)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(SYSTEM)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_13()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParlexTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[37];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parlex(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parlex(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParlexTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parlex(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParlexTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parlex(ParlexTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParlexTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 37; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
